{#- Template: terragrunt.hcl.j2 #}
# This file has been generated using the launch-cli
locals {
  # Inputs that can be shared across all the child modules
  naming_prefix = "{{ data.config.naming_prefix }}"

  # Loads the account related details like account name, id etc.
  account_vars = read_terragrunt_config(find_in_parent_folders("account.hcl"))

  # Loads the aws region information
  region_vars = read_terragrunt_config(find_in_parent_folders("region.hcl"))

  account_name = local.account_vars.locals.account_name
  region       = local.region_vars.locals.region
{#- Azure specific settings #}
{%- if data.config.provider == 'az' %}
{%-   set stripped_name_prefix_list = [] %}
{%-   for char in data.config.naming_prefix %}
{%-     if char.isalnum() %}
{%-       set _ = stripped_name_prefix_list.append(char) %}
{%-     endif %}
{%-   endfor %}
{%-   set stripped_name_prefix = stripped_name_prefix_list | join('') %}
  # Subscription id for the account
{%-   set accounts = data.config.accounts | replace("'", '"') %}
  subscriptions = {{ accounts }}
  subscription_id = local.subscriptions[local.account_name]

  uuid = read_terragrunt_config("${get_terragrunt_dir()}/uuid.hcl").locals.uuid
  relative_path      = path_relative_to_include()
  environment_instance = basename(local.relative_path)
{%-   if data.config.remote_state and data.config.remote_state.resource_group_name %}
  backend_rg_name              = "{{ data.config.remote_state.resource_group_name}}"
{%-   else %}
  backend_rg_name              = "${local.naming_prefix}-rg-${local.region}-${local.account_name}-${local.environment_instance}-tfstate"
{%-   endif %}
{%-   if data.config.remote_state and data.config.remote_state.storage_account_name %}
  backend_storage_account_name = "{{ data.config.remote_state.storage_account_name}}" # 24 chars limit
{%-   else %}
  backend_storage_account_name = "{{ stripped_name_prefix }}${local.uuid}" # 24 chars limit
{%-   endif %}
{%-   if data.config.remote_state and data.config.remote_state.container_name %}
  backend_container_name       = "{{ data.config.remote_state.container_name}}"
{%-   else %}
  backend_container_name       = "tfstate"
{%-   endif %}
}

# Generate Azure providers
generate "versions" {
  path      = "versions_override.tf"
  if_exists = "overwrite_terragrunt"
  contents  = <<EOF
    terraform {
      required_version = "<= 1.5.5"
      required_providers {
        azurerm = {
          source = "hashicorp/azurerm"
          version = ">=3.77.0"
        }
      }
    }

    provider "azurerm" {
        features {}
        subscription_id = "${local.subscription_id}"
    }
EOF
}

remote_state {
  backend = "azurerm"
  generate = {
    path      = "backend.tf"
    if_exists = "overwrite_terragrunt"
  }
  config = {
    key                  = "${path_relative_to_include()}/terraform.tfstate"
    resource_group_name  = local.backend_rg_name
    storage_account_name = local.backend_storage_account_name
    container_name       = local.backend_container_name
  }
}
{#- AWS specific settings #}
{%- elif data.config.provider == 'aws' %}
  # AWS Profile name
{%-   set accounts = data.config.accounts | replace("'", '"') %}
  profiles = {{ accounts }}
  profile_name = local.profiles[local.account_name]

  relative_path      = path_relative_to_include()
  environment_instance = basename(local.relative_path)
{%-   if data.config.remote_state and data.config.remote_state.bucket %}
  bucket          = "{{ data.config.remote_state.bucket}}"
{%-   else %}
  bucket          = "${replace(local.naming_prefix, "_", "-")}-${local.region}-${local.account_name}-${local.environment_instance}-tfstate"
{%-   endif %}
{%-   if data.config.remote_state and data.config.remote_state.dynamodb_table %}
  dynamodb_table  = "{{ data.config.remote_state.dynamodb_table}}"
{%-   else %}
  dynamodb_table  = "${local.naming_prefix}-${local.region}-${local.account_name}-${local.environment_instance}-tflocks"
{%-   endif %}
}

# Generate the AWS provider settings
generate "provider" {
  path      = "provider.tf"
  if_exists = "overwrite"
  contents  = <<EOF
provider "aws" {
  profile = "${local.profile_name}"
  region  = "${local.region}"
}

provider "aws" {
  alias   = "global"
  profile = "${local.profile_name}"
  region  = "us-east-1"
}
EOF
}

# Generates the config file for s3 backend
remote_state {
  backend = "s3"
  generate = {
    path      = "backend.tf"
    if_exists = "overwrite"
  }
  config = {
    profile        = "${local.profile_name}"
    bucket         = "${local.bucket}"
    key            = "terraform.tfstate"
    region         = "${local.region}"
    encrypt        = true
    dynamodb_table = "${local.dynamodb_table}"
  }
}

inputs = {
  naming_prefix = local.naming_prefix
  environment   = local.account_name
  profile_name  = local.profile_name
  region        = local.region
}
{%- endif %}
